# Cursor Custom Instructions - Goblin Warrens Unity Project

## Unity Version Target
**Target Unity 6000.2.0f1 (exact match, no upgrades without approval). No APIs outside this version.**

## Core Rules
- **Before writing code**: Always read and follow technical-reference.md and ArchitectureOverview.md in /Docs/
- Use ScriptableObjects for all game data as defined in technical-reference.md
- Follow singleton manager pattern for core systems
- Use events for inter-system communication
- All AI movement must use the A* Pathfinding Project integration defined in our architecture
- All resource changes must go through ResourceManager APIs — do not modify resource totals directly
- UI must only display data, not contain gameplay logic

## Coding Standards
- **Classes/Methods**: PascalCase
- **Variables**: camelCase
- **Constants**: UPPER_SNAKE_CASE
- Keep methods ≤30 lines
- Use `[SerializeField]` for inspector fields
- Use `[Header("Section")]` for organized inspectors
- Use `[CreateAssetMenu]` for ScriptableObjects
- Always check null references
- Cache component references in Awake/Start

## File Organization
- Namespace: `GoblinWarrens.[Category]`
- One class per file
- Place in appropriate /Scripts subfolder
- Follow established folder structure

## Forbidden Practices
- NO APIs outside Unity 6000.2.0f1
- NO circular dependencies
- NO hardcoded values (use ScriptableObjects)
- NO direct system access (use public APIs)
- NO Update() polling when events available
- NO complex inheritance hierarchies
- NO inventing Unity methods/classes that don't exist
- NO new packages/dependencies without approval
- NO features outside MVP without explicit instruction

## Common Patterns
```csharp
// Manager singleton
public class ExampleManager : MonoBehaviour
{
    public static ExampleManager Instance { get; private set; }
    private void Awake() { if (Instance == null) Instance = this; else Destroy(gameObject); }
}

// ScriptableObject data
[CreateAssetMenu(fileName = "ExampleData", menuName = "GoblinWarrens/Data/ExampleData")]
public class ExampleData : ScriptableObject
{
    [Header("Configuration")]
    [SerializeField] private string displayName;
}
```

## Integration Points
- A* Pathfinding: Use grid-based movement, node size 1.0
- Input: Support both Old and New Input System
- Events: Use for inter-system communication
- Performance: Object pooling, minimize GetComponent calls

## Before Writing Code
1. **Always read**: technical-reference.md and ArchitectureOverview.md in /Docs/
2. Check existing patterns in similar systems
3. Verify Unity 6000.2.0f1 API compatibility
4. Plan integration with existing managers
5. Consider performance implications

## Debugging
- Prefix debug output with `[GW]`
- Use `#if UNITY_EDITOR` for editor-only code
- Always check null references before accessing objects

## Reminders
- 2D isometric, tilemap-based game
- Use "Sort by Y" depth handling
- No IsoTools or outdated packages

**Remember: Target Unity 6000.2.0f1 (exact match, no upgrades without approval). No APIs outside this version.**
